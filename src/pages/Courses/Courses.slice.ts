// import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
// import { RootState, AppThunk } from '../../app/store';
// import { fetchCount } from './counterAPI';

// export interface CoursesState {
//   data: any[];
//   status: 'idle' | 'loading' | 'failed';
// }

// const initialState: CoursesState = {
//   data: [],
//   status: 'idle',
// };


// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

// export const counterSlice = createSlice({
//   name: 'counter',
//   initialState,
//   reducers: {

//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       });
//   },
// });


// export const selectCount = (state: RootState) => state.counter.value;

// export default counterSlice.reducer;
export default () => null